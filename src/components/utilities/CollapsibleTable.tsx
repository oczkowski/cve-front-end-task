import React from 'react';

// Material UI Components / Utilities
import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Box from '@material-ui/core/Box';
import Collapse from '@material-ui/core/Collapse';
import IconButton from '@material-ui/core/IconButton';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';

import Typography from '@material-ui/core/Typography';

import GridList from '@material-ui/core/GridList';
import GridListTile from '@material-ui/core/GridListTile';

// Import table styling
import './CollapsibleTable.css';

// Row styling
const useRowStyles = makeStyles({
    root: {
        '& > *': {
            borderBottom: 'unset',
        },
    },
});

const useListStyles = makeStyles({
    root: {
        display: 'flex',
        flexWrap: 'wrap',
        justifyContent: 'space-around',
        overflow: 'hidden',
        backgroundColor: 'white',
    },
    gridList: {
        width: '100%',
        height: 'auto',
    },
});

// Each row is a component with it's own state
const Row = (props: {
    entry: {
        values: Array<string | number>;
        hiddenValues: {
            [key: string]: string | number;
        };
    };
}) => {
    const { entry } = props;
    const [open, setOpen] = React.useState(false);
    const RowClasses = useRowStyles();
    const listClasses = useListStyles();

    return (
        <>
            <TableRow className={RowClasses.root}>
                <TableCell>
                    <IconButton
                        aria-label="expand row"
                        size="small"
                        onClick={() => setOpen(!open)}
                    >
                        {open ? (
                            <KeyboardArrowUpIcon />
                        ) : (
                            <KeyboardArrowDownIcon />
                        )}
                    </IconButton>
                </TableCell>

                {entry.values.map((value, i) => {
                    return i === 0 ? (
                        <TableCell key={i} component="th" scope="row">
                            {value}
                        </TableCell>
                    ) : (
                        <TableCell key={i} align="right">
                            {value}
                        </TableCell>
                    );
                })}
            </TableRow>
            <TableRow>
                <TableCell
                    style={{ paddingBottom: 0, paddingTop: 0 }}
                    colSpan={6}
                >
                    <Collapse in={open} timeout="auto" unmountOnExit>
                        <div className={listClasses.root}>
                            <GridList
                                cellHeight={60}
                                className={listClasses.gridList}
                                cols={3}
                            >
                                {Object.entries(entry.hiddenValues).map(
                                    ([key, value], i) => {
                                        return (
                                            <GridListTile key={i} cols={1}>
                                                <Typography
                                                    noWrap={true}
                                                    align="center"
                                                >{`${key}: ${value}`}</Typography>
                                            </GridListTile>
                                        );
                                    }
                                )}
                            </GridList>
                        </div>
                    </Collapse>
                </TableCell>
            </TableRow>
        </>
    );
};

// Main Collapsible Table Component
const CollapsibleTable = (props: {
    headers: Array<string>;
    entries: Array<{
        values: Array<string | number>;
        hiddenValues: {
            [key: string]: string | number;
        };
    }>;
}) => {
    const { headers, entries } = props;
    return (
        <TableContainer component={Paper} className="collapsibleTable">
            <Table aria-label="collapsible table">
                <TableHead>
                    <TableRow>
                        <TableCell />
                        {headers.map((header, i) => {
                            return (
                                <TableCell
                                    key={i}
                                    {...(i === 0 ? {} : { align: 'right' })}
                                >
                                    {header}
                                </TableCell>
                            );
                        })}
                    </TableRow>
                </TableHead>
                <TableBody>
                    {entries.map((entry, index) => (
                        <Row key={index} entry={entry} />
                    ))}
                </TableBody>
            </Table>
        </TableContainer>
    );
};

export default CollapsibleTable;
