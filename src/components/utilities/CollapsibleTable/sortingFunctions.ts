// Order type
type Order = 'asc' | 'desc';

function descendingComparator<T>(
    a: { values: Array<string | number> },
    b: { values: Array<string | number> },
    orderBy: number
) {
    // Assign data to variables we can work with
    var aValue = a.values[orderBy],
        bValue = b.values[orderBy];
    // Are we working with dates?
    if (!isNaN(+new Date(aValue)) && !isNaN(+new Date(bValue))) {
        aValue = +new Date(aValue);
        bValue = +new Date(bValue);
    }

    if (bValue < aValue) {
        return -1;
    }
    if (bValue > aValue) {
        return 1;
    }
    return 0;
}

export function getComparator(
    order: Order,
    orderBy: number
): (
    a: { values: Array<string | number> },
    b: { values: Array<string | number> }
) => number {
    return order === 'desc'
        ? (a, b) => descendingComparator(a, b, orderBy)
        : (a, b) => -descendingComparator(a, b, orderBy);
}

export function stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {
    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);
    stabilizedThis.sort((a, b) => {
        const order = comparator(a[0], b[0]);
        if (order !== 0) return order;
        return a[1] - b[1];
    });
    return stabilizedThis.map((el) => el[0]);
}
