import React, { useEffect } from 'react';

// Importing momentjs library
import moment from 'moment';

// Redux connect functionj
import { connect } from 'react-redux';

// Material UI Components / Utilities
import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';

// Importing the collapsible table component we created.
import CollapsibleTable from './utilities/CollapsibleTable/CollapsibleTable';

// Importing a chart for CVE Analysis
import Chart from './utilities/Graph/Graph';

// CVE Item interface
import { CVEItem } from './types';

// Material UI Paper styling
const useStyles = makeStyles((theme: Theme) =>
    createStyles({
        paper: {
            padding: '24px 24px 16px 24px',
            textAlign: 'left',
            color: theme.palette.text.secondary,
        },
    })
);

// Filter Inputs interface
interface filterInputs {
    cveID: string;
    year: number;
    severity: 'low' | 'medium' | 'high' | 'critical';
}

const DataResults = (props: {
    cveItems: Array<CVEItem>;
    language: string;
    filterInputs: filterInputs;
}) => {
    const { cveItems, language, filterInputs } = props;

    const classes = useStyles();

    // If any of filter inputs or language updates, we filter the data agian.
    const { cveID, year, severity } = filterInputs;
    useEffect(() => {}, [cveID, year, severity, language]);

    /**
     * Preparing/Filtering CVE data for the table.
     */
    // NOTE: This data doesn't get refetched so we don't listen to changes on it.
    var tableEntries = cveItems.map((cveItem) => {
        var descriptionByLanguage: {
            lang: string;
            value: string;
        } = cveItem.cve.description.description_data.filter(
            (desc) => desc.lang === language
        )[0];
        return {
            values: [
                cveItem.cve.CVE_data_meta.ID,
                moment(cveItem.publishedDate).format('DD MMM YYYY'),
                cveItem.impact.baseMetricV2
                    ? cveItem.impact.baseMetricV2.severity
                    : 'NONE',
                descriptionByLanguage.value,
            ],
            hiddenValues: {
                'Data Type': cveItem.cve.data_type,
                'Data Format': cveItem.cve.data_format,
                'Data Version': cveItem.cve.data_version,
                Assigner: cveItem.cve.CVE_data_meta.ASSIGNER,
                'Last Modified': moment(cveItem.lastModifiedDate).format(
                    'DD MMM YYYY'
                ),
                'Impact Score': cveItem.impact.baseMetricV2
                    ? cveItem.impact.baseMetricV2.impactScore
                    : 'N/A',
            },
        };
    });

    // Graph data - Grouping the data by => severity => month
    const severities: {
        [key: string]: {
            [key: string]: number;
        };
    } = {};

    // Get full date range to then apply missing data to series array
    const uniqueDates = new Set<string>();

    for (let item of cveItems) {
        // Get categories
        let severity = item.impact.baseMetricV2
            ? item.impact.baseMetricV2.severity
            : 'NONE';
        let monthYearLabel = moment(item.publishedDate).format('MMM YYYY');

        // Add month to unqiue set
        uniqueDates.add(monthYearLabel);

        // Create properties if don't already exist
        if (!severities[severity]) severities[severity] = {};
        if (!severities[severity][monthYearLabel])
            severities[severity][monthYearLabel] = 0;

        // Add up severity count
        severities[severity][monthYearLabel]++;
    }

    // Add missing month data
    for (let label of Array.from(uniqueDates)) {
        for (let [severity, severityDates] of Object.entries(severities)) {
            if (!Object.keys(severityDates).includes(label)) {
                // We don't have a label like that. Let's add it
                severities[severity][label] = 0;
            }
        }
    }

    // Now let's sort this data by the keys and add it to the series
    const series: Array<object> = Object.entries(severities).map(
        ([severity, months]) => {
            return {
                name: severity,
                data: Object.entries(months)
                    .sort(
                        ([date1], [date2]) =>
                            +new Date(date1) - +new Date(date2)
                    )
                    .map(([date, count]) => count),
            };
        }
    );

    const options = {
        yAxis: {
            title: {
                text: 'Count',
            },
        },
        xAxis: {
            categories: Array.from(uniqueDates),
        },
    };

    return (
        <Paper className={classes.paper}>
            <div>Search Results</div>
            <p />
            <CollapsibleTable
                headers={[
                    `CVE ID`,
                    `PUBLISHED DATE`,
                    `SEVERITY`,
                    `DESCRIPTION`,
                ]}
                entries={tableEntries}
            />
            <p style={{ marginBottom: '50px' }} />
            <Chart
                title="CVE Analysis for 2015"
                series={series}
                options={options}
            />
        </Paper>
    );
};

const mapStateToProps = (state: {
    cveData: {
        CVE_Items: Array<CVEItem>;
    };
    themeSettings: {
        language: string;
    };
    filterInputs: filterInputs;
}) => {
    return {
        cveItems: state.cveData.CVE_Items,
        // Please read the reducer description for language.
        language: state.themeSettings.language,
        filterInputs: state.filterInputs,
    };
};

export default connect(mapStateToProps, {})(DataResults);
