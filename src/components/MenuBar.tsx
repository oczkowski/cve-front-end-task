import React from 'react';
// Material UI components
import {
    fade,
    makeStyles,
    Theme,
    createStyles,
    withStyles,
} from '@material-ui/core/styles';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';

import InputBase from '@material-ui/core/InputBase';
import SearchIcon from '@material-ui/icons/Search';

import Switch from '@material-ui/core/Switch';

// React redux
import { connect } from 'react-redux';

// Redux Actions
import { toggleFilterDrawer } from '../store/actions';
import { updateCVEStringSearch } from '../store/actions';

// TypeScript interfaces
import { filterActions, themeSettingsActions } from '../store/actions/types';

// Material UI components styling
const useStyles = makeStyles((theme: Theme) =>
    createStyles({
        root: {
            flexGrow: 1,
        },
        search: {
            position: 'relative',
            borderRadius: theme.shape.borderRadius,
            backgroundColor: fade(theme.palette.common.white, 0.9),
            '&:hover': {
                backgroundColor: fade(theme.palette.common.white, 1),
            },
            color: fade(theme.palette.common.black, 0.7),
            marginRight: theme.spacing(2),
            marginLeft: 0,
            [theme.breakpoints.up('sm')]: {
                marginLeft: theme.spacing(3),
                width: 'auto',
            },
        },
        searchIcon: {
            padding: theme.spacing(0, 2),
            color: fade(theme.palette.common.black, 0.3),
            height: '100%',
            position: 'absolute',
            pointerEvents: 'none',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
        },
        inputRoot: {
            color: 'inherit',
        },
        inputInput: {
            padding: theme.spacing(1, 1, 1, 0),
            // vertical padding + font size from searchIcon
            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,
            transition: theme.transitions.create('width'),
            width: '100%',
            [theme.breakpoints.up('md')]: {
                width: '20ch',
            },
        },
        title: {
            flexGrow: 1,
        },
        grow: {
            flexGrow: 4,
        },
    })
);

// Material UI switch with styles
const AntSwitch = withStyles((theme: Theme) =>
    createStyles({
        root: {
            width: 40,
            height: 20,
            padding: 0,
            display: 'flex',
            overflow: 'visible',
        },
        switchBase: {
            padding: 2,
            color: theme.palette.grey[500],
            '&$checked': {
                transform: 'translateX(18px)',
                color: '#008cf2',
                '& + $track': {
                    opacity: 1,
                    backgroundColor: 'white',
                    borderColor: 'white',
                },
            },
        },
        thumb: {
            width: 18,
            height: 18,
            boxShadow: 'none',
            borderRadius: 10 / 2,
        },
        track: {
            border: `1px solid white`,
            borderRadius: 10 / 2,
            opacity: 1,
            backgroundColor: theme.palette.common.white,
        },
        checked: {},
    })
)(Switch);

// Component props interface
interface MenuBarProps {
    filterDrawerOpen: boolean;
    cveIDSearchValue: string;
    toggleFilterDrawer: (option: boolean) => themeSettingsActions;
    updateCVEStringSearch: (option: string) => filterActions;
}

const MenuBar = (props: MenuBarProps) => {
    // Redux drawer state
    const { filterDrawerOpen, cveIDSearchValue } = props;

    // Material UI components classes
    const classes = useStyles();

    return (
        <>
            <AppBar position="static" style={{ backgroundColor: '#008cf2' }}>
                <Toolbar>
                    {/* Page title */}
                    <Typography variant="h6" className={classes.title}>
                        CVE Analysis
                    </Typography>
                    {/* Search input */}
                    <div className={classes.search}>
                        <div className={classes.searchIcon}>
                            <SearchIcon />
                        </div>
                        <InputBase
                            placeholder="Search by CVE ID"
                            classes={{
                                root: classes.inputRoot,
                                input: classes.inputInput,
                            }}
                            inputProps={{ 'aria-label': 'search' }}
                            value={cveIDSearchValue}
                            onChange={(e) => {
                                props.updateCVEStringSearch(e.target.value);
                            }}
                        />
                    </div>
                    {/* Space holder div using flex */}
                    <div className={classes.grow} />
                    <Typography>
                        <AntSwitch
                            checked={filterDrawerOpen}
                            onChange={(e) => {
                                props.toggleFilterDrawer(e.target.checked);
                            }}
                            name="filterDrawer"
                        />
                    </Typography>
                </Toolbar>
            </AppBar>
        </>
    );
};

const mapStateToProps = (state: {
    themeSettings: {
        filterDrawerOpen: boolean;
    };
    filterInputs: {
        cveID: string;
    };
}) => {
    return {
        filterDrawerOpen: state.themeSettings.filterDrawerOpen,
        cveIDSearchValue: state.filterInputs.cveID,
    };
};

export default connect(mapStateToProps, {
    toggleFilterDrawer,
    updateCVEStringSearch,
})(MenuBar);
