import React from 'react';

import { connect } from 'react-redux';

// Material UI Components / Utilities
import clsx from 'clsx';
import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';
import FormControl from '@material-ui/core/FormControl';
import Select from '@material-ui/core/Select';
import Paper from '@material-ui/core/Paper';

import Input from '@material-ui/core/Input';
import MenuItem from '@material-ui/core/MenuItem';

// Actions
import {
    updateYearFilter,
    updateSeveritiesFilter,
} from '../store/actions/filterInputs';

// TypeScript types/interfaces
import { CVEItem, filterInputs } from './types';

// Material UI Paper styling
const useStyles = makeStyles((theme: Theme) =>
    createStyles({
        paper: {
            padding: '16px 24px 16px 24px',
            textAlign: 'left',
            color: theme.palette.text.secondary,
            fontSize: '14px',
        },
        formControl: {
            margin: theme.spacing(1),
            minWidth: 120,
        },
        selectEmpty: {
            marginTop: theme.spacing(2),
        },
        noLabel: {
            marginTop: theme.spacing(3),
        },
    })
);

// Filter Drawer props interface
interface FilterDrawerProps {
    cveItems: Array<CVEItem>;
    year: number;
    severity: Array<string>;
    updateYearFilter: Function;
    updateSeveritiesFilter: Function;
}

const FilterDrawer = (props: FilterDrawerProps) => {
    const classes = useStyles();

    const { year, severity, cveItems } = props;

    // Get all available years
    const years = new Set<number>();
    for (let item of Object.values(cveItems)) {
        years.add(new Date(item.publishedDate).getFullYear());
    }

    // Get all severities
    const severities = new Set<string>();
    for (let item of Object.values(cveItems)) {
        let impact = item.impact;
        severities.add(
            impact.baseMetricV2 ? impact.baseMetricV2.severity : 'NONE'
        );
    }

    // Setup multiple select dropdown menu
    const ITEM_HEIGHT = 48;
    const ITEM_PADDING_TOP = 8;
    const MenuProps = {
        PaperProps: {
            style: {
                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
                width: 250,
            },
        },
    };

    return (
        <Paper className={classes.paper}>
            <div>Select a single year</div>
            <FormControl
                variant="outlined"
                className={classes.formControl}
                style={{ marginBottom: '100px' }}
            >
                <Select
                    native
                    value={year || ''}
                    onChange={(e) => {
                        const value: number = Number(e.target.value);
                        props.updateYearFilter(value);
                    }}
                    inputProps={{
                        name: 'year',
                        id: 'outlined-age-native-simple',
                    }}
                >
                    <option aria-label="None" value="" />
                    {Array.from(years).map((year, i) => (
                        <option key={i} value={year}>
                            {year}
                        </option>
                    ))}
                </Select>
            </FormControl>

            <div>Select multiple severities</div>
            <FormControl className={clsx(classes.formControl, classes.noLabel)}>
                <Select
                    multiple
                    displayEmpty
                    value={severity}
                    onChange={(e) => {
                        const selectedSeverities = e.target.value;
                        props.updateSeveritiesFilter(selectedSeverities);
                    }}
                    input={<Input />}
                    renderValue={(selected) => {
                        if ((selected as string[]).length === 0) {
                            return <em>Placeholder</em>;
                        }

                        return (selected as string[]).join(', ');
                    }}
                    MenuProps={MenuProps}
                    inputProps={{ 'aria-label': 'Without label' }}
                >
                    <MenuItem disabled value="">
                        <em>Placeholder</em>
                    </MenuItem>
                    {Array.from(severities).map(
                        (severity: string, i: number) => (
                            <MenuItem
                                key={i}
                                value={severity}
                                // style={getStyles(name, personName, theme)}
                            >
                                {severity}
                            </MenuItem>
                        )
                    )}
                </Select>
            </FormControl>
        </Paper>
    );
};

const mapStateToProps = (state: {
    filterInputs: filterInputs;
    cveData: {
        CVE_Items: Array<CVEItem>;
    };
}) => {
    return {
        cveItems: state.cveData.CVE_Items,
        year: state.filterInputs.year,
        severity: state.filterInputs.severity,
    };
};

export default connect(mapStateToProps, {
    updateYearFilter,
    updateSeveritiesFilter,
})(FilterDrawer);
